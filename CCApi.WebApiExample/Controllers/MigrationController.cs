using CCApi.WebApiExample.Data;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics;

[ApiController]
[Route("api/migrate")]
public class MigrationController : ControllerBase
{
    private readonly IHostApplicationLifetime _appLifetime;
    private readonly string _projectDirectory;

    public MigrationController(
        AppDbContext context,
        IHostApplicationLifetime appLifetime)
    {
        _appLifetime = appLifetime;

        _projectDirectory = Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly()?.Location);
    }

    [HttpPost]
    public IActionResult ApplyMigrationsAndRestart()
    {
        try
        {
            GenerateMigrationsIfNeeded();
            
            var directory = Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly()?.Location);
         
            ApplyMigrationsAfterRestart(directory);

            RestartApplication();
            
            _appLifetime.StopApplication();

            return Ok("Migrations applied. Application restarting...");
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error: {ex.Message}");
        }
    }

    private void GenerateMigrationsIfNeeded()
    {
        try
        {
            var migrationDirectory = Path.Combine(_projectDirectory, "Migrations");

            
            if (!Directory.Exists(migrationDirectory))
            {
                Directory.CreateDirectory(migrationDirectory);
            }

            string formattedDate = DateTime.Now.ToString("yyyyMMddHHmmss");

            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "dotnet",
                Arguments = $"ef migrations add AutoGeneratedMigration_{formattedDate} --project {_projectDirectory}/../../../CCApi.WebApiExample.csproj",
                UseShellExecute = false,
                CreateNoWindow = true
            };

            Process.Start(startInfo)?.WaitForExit();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating migrations: {ex.Message}");
        }
    }

    private void RestartApplication()
    {
        try
        {
            var exePath = System.Reflection.Assembly.GetEntryAssembly()?.Location;

            if (exePath != null)
            {
                var directory = Path.GetDirectoryName(exePath);

                if (directory != null)
                {
                    Process.Start(new ProcessStartInfo
                    {
                        FileName = "dotnet",
                        Arguments = Path.Combine(directory, "CCApi.WebApiExample.dll"),  
                        UseShellExecute = false,
                        CreateNoWindow = true
                    });

                    ApplyMigrationsAfterRestart(directory);

                    _appLifetime.StopApplication();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to restart application: {ex.Message}");
        }
    }

    private void ApplyMigrationsAfterRestart(string directory)
    {
        try
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "dotnet",
                Arguments = $"ef database update --project {_projectDirectory}/../../../CCApi.WebApiExample.csproj",
                UseShellExecute = false,
                CreateNoWindow = true
            };

            Process.Start(startInfo)?.WaitForExit();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to apply migrations after restart: {ex.Message}");
        }
    }
}

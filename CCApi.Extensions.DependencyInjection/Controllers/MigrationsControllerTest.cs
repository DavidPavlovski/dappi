using System.Diagnostics;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Hosting;

namespace CCApi.Extensions.DependencyInjection.Controllers;

[ApiExplorerSettings(GroupName = "Toolkit")]
[ApiController]
[Route("api/create-migrations-update-db-test")]
public class MigrationControllerTest : ControllerBase
{
    private readonly IHostApplicationLifetime _appLifetime;
    private readonly string _projectDirectory;

    public MigrationControllerTest(
        IHostApplicationLifetime appLifetime)
    {
        _appLifetime = appLifetime;
        _projectDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly()?.Location);
    }

    [HttpPost]
    public IActionResult ApplyMigrationsAndRestart()
    {
        try
        {
            GenerateMigrationsIfNeeded();
            ApplyMigrationsAfterRestart();
            RestartApplication();
            _appLifetime.StopApplication();
            return Ok("Migrations applied. Application restarting...");
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error: {ex.Message}");
        }
    }

   private void GenerateMigrationsIfNeeded()
    {
        try
        {
            var migrationDirectory = Path.Combine(_projectDirectory, "Migrations");
            if (!Directory.Exists(migrationDirectory))
            {{
                Directory.CreateDirectory(migrationDirectory);
            }}
            string formattedDate = DateTime.Now.ToString("yyyyMMddHHmmss");
           
            var csprojFile = Directory.GetFiles(_projectDirectory, "*.csproj").FirstOrDefault();
            var directory = Directory.GetCurrentDirectory();
            string v = $"ef migrations add AutoGeneratedMigration_{formattedDate}";
            var startInfo = new ProcessStartInfo
            {
                WorkingDirectory = directory,
                FileName = "dotnet",
                Arguments = v,
                UseShellExecute = true,
                CreateNoWindow = false
            };
            var process = new Process
            {
                StartInfo = startInfo
            };
            process.Start();
            process.WaitForExit();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating migrations: {ex.Message}");
        }
    }

    private void RestartApplication()
    {
        try
        {
            var exePath = Assembly.GetEntryAssembly()?.Location;
            if (exePath != null)
            {
                var directory = Path.GetDirectoryName(exePath);
                var processId = Process.GetCurrentProcess().Id;
                string scriptPath;
                string scriptContent;
                if (OperatingSystem.IsWindows())
                {
                    scriptPath = Path.Combine(directory, "restart.bat");
                    scriptContent = $@"
@echo off
set pid={processId}
set app_path=""{exePath}""

:waitloop
tasklist /FI ""PID eq %pid%"" | find /I ""%pid%"" >nul
if not errorlevel 1 (
    timeout /t 1 >nul
    goto waitloop
)

start """" dotnet ""%app_path%""
exit
";
                }
                else
                {
                    scriptPath = Path.Combine(directory, "restart.sh");
                    scriptContent = $@"
#!/bin/bash
pid={processId}
app_path=""{exePath}""

# Wait until the old process exits
while kill -0 ""$pid"" 2>/dev/null; do sleep 1; done

# Start the new instance
dotnet ""$app_path"" &
";
                    System.IO.File.WriteAllText(scriptPath, scriptContent);
                    Process.Start("chmod", new[] { "+x", scriptPath })?.WaitForExit();
                }
                System.IO.File.WriteAllText(scriptPath, scriptContent);
                var startInfo = new ProcessStartInfo
                {
                    FileName = OperatingSystem.IsWindows() ? "cmd.exe" : "/bin/bash",
                    Arguments = OperatingSystem.IsWindows() ? $"/c \"{scriptPath}\"" : $"-c \"{scriptPath}\"",
                    UseShellExecute = false,
                    CreateNoWindow = true
                };
                Process.Start(startInfo);
                _appLifetime.StopApplication();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to restart application: {ex.Message}");
        }
    }

    private void ApplyMigrationsAfterRestart()
    {
        try
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "dotnet",
                Arguments = $"ef database update --project {_projectDirectory}/../../../CCApi.WebApiExample.csproj",
                UseShellExecute = false,
                CreateNoWindow = true
            };
            Process.Start(startInfo)?.WaitForExit();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to apply migrations after restart: {ex.Message}");
        }
    }
}